mdp

const double addServer_LATENCY = 120;
const int HORIZON = 5;
const double PERIOD = 60;
const int DIMMER_LEVELS = 3;
const int ini_dimmer = 1;
const int MAX_SERVERS_A = 1;
const int MAX_SERVERS_B = 1;
const int MAX_SERVERS_C = 1;
const int ini_servers_A = 1;
const int ini_servers_B = 1;
const int ini_servers_C = 1;
const int ini_addServerA_state = 0;
const int ini_addServerB_state = 0;
const int ini_addServerC_state = 0;
const double SERVERA_COST_SEC = 1;
const double SERVERB_COST_SEC = 0.7;
const double SERVERC_COST_SEC = 0.5;
const double MAX_ARRIVALA_CAPACITY = 200;
const double MAX_ARRIVALA_CAPACITY_LOW = 400;
const double MAX_ARRIVALB_CAPACITY = 140;
const double MAX_ARRIVALB_CAPACITY_LOW = 280;
const double MAX_ARRIVALC_CAPACITY = 100;
const double MAX_ARRIVALC_CAPACITY_LOW = 200;
const double penalty = -0.25;
const int ini_traffic_A = 2;
const int ini_traffic_B = 1;
const int ini_traffic_C = 1;
const double interArrivalScaleFactorForDecision = 1;


module environment
s : [0..201] init 0;
[tick] s = 0 -> 
	0.185 : (s' = 1)
	+ 0.63 : (s' = 2)
	+ 0.185 : (s' = 3);
[tick] s = 3 -> 
	0.185 : (s' = 4)
	+ 0.63 : (s' = 5)
	+ 0.185 : (s' = 6);
[tick] s = 6 -> 
	0.185 : (s' = 7)
	+ 0.63 : (s' = 8)
	+ 0.185 : (s' = 9);
[tick] s = 9 -> 
	0.185 : (s' = 10)
	+ 0.63 : (s' = 11)
	+ 0.185 : (s' = 12);
[tick] s = 12 -> 
	1 : (s' = 13);
[tick] s = 11 -> 
	1 : (s' = 14);
[tick] s = 10 -> 
	1 : (s' = 15);
[tick] s = 8 -> 
	0.185 : (s' = 16)
	+ 0.63 : (s' = 17)
	+ 0.185 : (s' = 18);
[tick] s = 18 -> 
	1 : (s' = 19);
[tick] s = 17 -> 
	1 : (s' = 20);
[tick] s = 16 -> 
	1 : (s' = 21);
[tick] s = 7 -> 
	0.185 : (s' = 22)
	+ 0.63 : (s' = 23)
	+ 0.185 : (s' = 24);
[tick] s = 24 -> 
	1 : (s' = 25);
[tick] s = 23 -> 
	1 : (s' = 26);
[tick] s = 22 -> 
	1 : (s' = 27);
[tick] s = 5 -> 
	0.185 : (s' = 28)
	+ 0.63 : (s' = 29)
	+ 0.185 : (s' = 30);
[tick] s = 30 -> 
	0.185 : (s' = 31)
	+ 0.63 : (s' = 32)
	+ 0.185 : (s' = 33);
[tick] s = 33 -> 
	1 : (s' = 34);
[tick] s = 32 -> 
	1 : (s' = 35);
[tick] s = 31 -> 
	1 : (s' = 36);
[tick] s = 29 -> 
	0.185 : (s' = 37)
	+ 0.63 : (s' = 38)
	+ 0.185 : (s' = 39);
[tick] s = 39 -> 
	1 : (s' = 40);
[tick] s = 38 -> 
	1 : (s' = 41);
[tick] s = 37 -> 
	1 : (s' = 42);
[tick] s = 28 -> 
	0.185 : (s' = 43)
	+ 0.63 : (s' = 44)
	+ 0.185 : (s' = 45);
[tick] s = 45 -> 
	1 : (s' = 46);
[tick] s = 44 -> 
	1 : (s' = 47);
[tick] s = 43 -> 
	1 : (s' = 48);
[tick] s = 4 -> 
	0.185 : (s' = 49)
	+ 0.63 : (s' = 50)
	+ 0.185 : (s' = 51);
[tick] s = 51 -> 
	0.185 : (s' = 52)
	+ 0.63 : (s' = 53)
	+ 0.185 : (s' = 54);
[tick] s = 54 -> 
	1 : (s' = 55);
[tick] s = 53 -> 
	1 : (s' = 56);
[tick] s = 52 -> 
	1 : (s' = 57);
[tick] s = 50 -> 
	0.185 : (s' = 58)
	+ 0.63 : (s' = 59)
	+ 0.185 : (s' = 60);
[tick] s = 60 -> 
	1 : (s' = 61);
[tick] s = 59 -> 
	1 : (s' = 62);
[tick] s = 58 -> 
	1 : (s' = 63);
[tick] s = 49 -> 
	0.185 : (s' = 64)
	+ 0.63 : (s' = 65)
	+ 0.185 : (s' = 66);
[tick] s = 66 -> 
	1 : (s' = 67);
[tick] s = 65 -> 
	1 : (s' = 68);
[tick] s = 64 -> 
	1 : (s' = 69);
[tick] s = 2 -> 
	0.185 : (s' = 70)
	+ 0.63 : (s' = 71)
	+ 0.185 : (s' = 72);
[tick] s = 72 -> 
	0.185 : (s' = 73)
	+ 0.63 : (s' = 74)
	+ 0.185 : (s' = 75);
[tick] s = 75 -> 
	0.185 : (s' = 76)
	+ 0.63 : (s' = 77)
	+ 0.185 : (s' = 78);
[tick] s = 78 -> 
	1 : (s' = 79);
[tick] s = 77 -> 
	1 : (s' = 80);
[tick] s = 76 -> 
	1 : (s' = 81);
[tick] s = 74 -> 
	0.185 : (s' = 82)
	+ 0.63 : (s' = 83)
	+ 0.185 : (s' = 84);
[tick] s = 84 -> 
	1 : (s' = 85);
[tick] s = 83 -> 
	1 : (s' = 86);
[tick] s = 82 -> 
	1 : (s' = 87);
[tick] s = 73 -> 
	0.185 : (s' = 88)
	+ 0.63 : (s' = 89)
	+ 0.185 : (s' = 90);
[tick] s = 90 -> 
	1 : (s' = 91);
[tick] s = 89 -> 
	1 : (s' = 92);
[tick] s = 88 -> 
	1 : (s' = 93);
[tick] s = 71 -> 
	0.185 : (s' = 94)
	+ 0.63 : (s' = 95)
	+ 0.185 : (s' = 96);
[tick] s = 96 -> 
	0.185 : (s' = 97)
	+ 0.63 : (s' = 98)
	+ 0.185 : (s' = 99);
[tick] s = 99 -> 
	1 : (s' = 100);
[tick] s = 98 -> 
	1 : (s' = 101);
[tick] s = 97 -> 
	1 : (s' = 102);
[tick] s = 95 -> 
	0.185 : (s' = 103)
	+ 0.63 : (s' = 104)
	+ 0.185 : (s' = 105);
[tick] s = 105 -> 
	1 : (s' = 106);
[tick] s = 104 -> 
	1 : (s' = 107);
[tick] s = 103 -> 
	1 : (s' = 108);
[tick] s = 94 -> 
	0.185 : (s' = 109)
	+ 0.63 : (s' = 110)
	+ 0.185 : (s' = 111);
[tick] s = 111 -> 
	1 : (s' = 112);
[tick] s = 110 -> 
	1 : (s' = 113);
[tick] s = 109 -> 
	1 : (s' = 114);
[tick] s = 70 -> 
	0.185 : (s' = 115)
	+ 0.63 : (s' = 116)
	+ 0.185 : (s' = 117);
[tick] s = 117 -> 
	0.185 : (s' = 118)
	+ 0.63 : (s' = 119)
	+ 0.185 : (s' = 120);
[tick] s = 120 -> 
	1 : (s' = 121);
[tick] s = 119 -> 
	1 : (s' = 122);
[tick] s = 118 -> 
	1 : (s' = 123);
[tick] s = 116 -> 
	0.185 : (s' = 124)
	+ 0.63 : (s' = 125)
	+ 0.185 : (s' = 126);
[tick] s = 126 -> 
	1 : (s' = 127);
[tick] s = 125 -> 
	1 : (s' = 128);
[tick] s = 124 -> 
	1 : (s' = 129);
[tick] s = 115 -> 
	0.185 : (s' = 130)
	+ 0.63 : (s' = 131)
	+ 0.185 : (s' = 132);
[tick] s = 132 -> 
	1 : (s' = 133);
[tick] s = 131 -> 
	1 : (s' = 134);
[tick] s = 130 -> 
	1 : (s' = 135);
[tick] s = 1 -> 
	0.185 : (s' = 136)
	+ 0.63 : (s' = 137)
	+ 0.185 : (s' = 138);
[tick] s = 138 -> 
	0.185 : (s' = 139)
	+ 0.63 : (s' = 140)
	+ 0.185 : (s' = 141);
[tick] s = 141 -> 
	0.185 : (s' = 142)
	+ 0.63 : (s' = 143)
	+ 0.185 : (s' = 144);
[tick] s = 144 -> 
	1 : (s' = 145);
[tick] s = 143 -> 
	1 : (s' = 146);
[tick] s = 142 -> 
	1 : (s' = 147);
[tick] s = 140 -> 
	0.185 : (s' = 148)
	+ 0.63 : (s' = 149)
	+ 0.185 : (s' = 150);
[tick] s = 150 -> 
	1 : (s' = 151);
[tick] s = 149 -> 
	1 : (s' = 152);
[tick] s = 148 -> 
	1 : (s' = 153);
[tick] s = 139 -> 
	0.185 : (s' = 154)
	+ 0.63 : (s' = 155)
	+ 0.185 : (s' = 156);
[tick] s = 156 -> 
	1 : (s' = 157);
[tick] s = 155 -> 
	1 : (s' = 158);
[tick] s = 154 -> 
	1 : (s' = 159);
[tick] s = 137 -> 
	0.185 : (s' = 160)
	+ 0.63 : (s' = 161)
	+ 0.185 : (s' = 162);
[tick] s = 162 -> 
	0.185 : (s' = 163)
	+ 0.63 : (s' = 164)
	+ 0.185 : (s' = 165);
[tick] s = 165 -> 
	1 : (s' = 166);
[tick] s = 164 -> 
	1 : (s' = 167);
[tick] s = 163 -> 
	1 : (s' = 168);
[tick] s = 161 -> 
	0.185 : (s' = 169)
	+ 0.63 : (s' = 170)
	+ 0.185 : (s' = 171);
[tick] s = 171 -> 
	1 : (s' = 172);
[tick] s = 170 -> 
	1 : (s' = 173);
[tick] s = 169 -> 
	1 : (s' = 174);
[tick] s = 160 -> 
	0.185 : (s' = 175)
	+ 0.63 : (s' = 176)
	+ 0.185 : (s' = 177);
[tick] s = 177 -> 
	1 : (s' = 178);
[tick] s = 176 -> 
	1 : (s' = 179);
[tick] s = 175 -> 
	1 : (s' = 180);
[tick] s = 136 -> 
	0.185 : (s' = 181)
	+ 0.63 : (s' = 182)
	+ 0.185 : (s' = 183);
[tick] s = 183 -> 
	0.185 : (s' = 184)
	+ 0.63 : (s' = 185)
	+ 0.185 : (s' = 186);
[tick] s = 186 -> 
	1 : (s' = 187);
[tick] s = 185 -> 
	1 : (s' = 188);
[tick] s = 184 -> 
	1 : (s' = 189);
[tick] s = 182 -> 
	0.185 : (s' = 190)
	+ 0.63 : (s' = 191)
	+ 0.185 : (s' = 192);
[tick] s = 192 -> 
	1 : (s' = 193);
[tick] s = 191 -> 
	1 : (s' = 194);
[tick] s = 190 -> 
	1 : (s' = 195);
[tick] s = 181 -> 
	0.185 : (s' = 196)
	+ 0.63 : (s' = 197)
	+ 0.185 : (s' = 198);
[tick] s = 198 -> 
	1 : (s' = 199);
[tick] s = 197 -> 
	1 : (s' = 200);
[tick] s = 196 -> 
	1 : (s' = 201);
[tick] (s = 13 | s = 14 | s = 15 | s = 19 | s = 20 | s = 21 | s = 25 | s = 26 | s = 27 | s = 34 | s = 35 | s = 36 | s = 40 | s = 41 | s = 42 | s = 46 | s = 47 | s = 48 | s = 55 | s = 56 | s = 57 | s = 61 | s = 62 | s = 63 | s = 67 | s = 68 | s = 69 | s = 79 | s = 80 | s = 81 | s = 85 | s = 86 | s = 87 | s = 91 | s = 92 | s = 93 | s = 100 | s = 101 | s = 102 | s = 106 | s = 107 | s = 108 | s = 112 | s = 113 | s = 114 | s = 121 | s = 122 | s = 123 | s = 127 | s = 128 | s = 129 | s = 133 | s = 134 | s = 135 | s = 145 | s = 146 | s = 147 | s = 151 | s = 152 | s = 153 | s = 157 | s = 158 | s = 159 | s = 166 | s = 167 | s = 168 | s = 172 | s = 173 | s = 174 | s = 178 | s = 179 | s = 180 | s = 187 | s = 188 | s = 189 | s = 193 | s = 194 | s = 195 | s = 199 | s = 200 | s = 201) -> 1 : true;
endmodule
formula stateValue = (s = 0 ? 0.00354737 : 0) + 
                     (s = 3 ? 0.00372718 : 0) + 
                     (s = 6 ? 0.00391323 : 0) + 
                     (s = 9 ? 0.00408929 : 0) + 
                     (s = 12 ? 0.00426036 : 0) + 
                     (s = 13 ? 0.00406165 : 0) + 
                     (s = 11 ? 0.00391111 : 0) + 
                     (s = 14 ? 0.00375431 : 0) + 
                     (s = 10 ? 0.00356186 : 0) + 
                     (s = 15 ? 0.00344697 : 0) + 
                     (s = 8 ? 0.00375618 : 0) + 
                     (s = 18 ? 0.00394033 : 0) + 
                     (s = 19 ? 0.00378002 : 0) + 
                     (s = 17 ? 0.00361797 : 0) + 
                     (s = 20 ? 0.00349635 : 0) + 
                     (s = 16 ? 0.00329562 : 0) + 
                     (s = 21 ? 0.00321268 : 0) + 
                     (s = 7 ? 0.00342307 : 0) + 
                     (s = 24 ? 0.00363728 : 0) + 
                     (s = 25 ? 0.00351334 : 0) + 
                     (s = 23 ? 0.00332483 : 0) + 
                     (s = 26 ? 0.00323839 : 0) + 
                     (s = 22 ? 0.00301239 : 0) + 
                     (s = 27 ? 0.00296344 : 0) + 
                     (s = 5 ? 0.00359245 : 0) + 
                     (s = 30 ? 0.00378909 : 0) + 
                     (s = 33 ? 0.00397124 : 0) + 
                     (s = 34 ? 0.00380723 : 0) + 
                     (s = 32 ? 0.00364694 : 0) + 
                     (s = 35 ? 0.00352184 : 0) + 
                     (s = 31 ? 0.00332263 : 0) + 
                     (s = 36 ? 0.00323645 : 0) + 
                     (s = 29 ? 0.00347389 : 0) + 
                     (s = 39 ? 0.00368232 : 0) + 
                     (s = 40 ? 0.00355298 : 0) + 
                     (s = 38 ? 0.00336956 : 0) + 
                     (s = 41 ? 0.00327775 : 0) + 
                     (s = 37 ? 0.0030568 : 0) + 
                     (s = 42 ? 0.00300252 : 0) + 
                     (s = 28 ? 0.0031587 : 0) + 
                     (s = 45 ? 0.00341001 : 0) + 
                     (s = 46 ? 0.00331334 : 0) + 
                     (s = 44 ? 0.00309219 : 0) + 
                     (s = 47 ? 0.00303366 : 0) + 
                     (s = 43 ? 0.00277437 : 0) + 
                     (s = 48 ? 0.00275398 : 0) + 
                     (s = 4 ? 0.00327168 : 0) + 
                     (s = 51 ? 0.0035057 : 0) + 
                     (s = 54 ? 0.00371074 : 0) + 
                     (s = 55 ? 0.00357799 : 0) + 
                     (s = 53 ? 0.00339755 : 0) + 
                     (s = 56 ? 0.00330238 : 0) + 
                     (s = 52 ? 0.00308437 : 0) + 
                     (s = 57 ? 0.00302678 : 0) + 
                     (s = 50 ? 0.00319161 : 0) + 
                     (s = 60 ? 0.00343767 : 0) + 
                     (s = 61 ? 0.00333769 : 0) + 
                     (s = 59 ? 0.00312115 : 0) + 
                     (s = 62 ? 0.00305915 : 0) + 
                     (s = 58 ? 0.00280464 : 0) + 
                     (s = 63 ? 0.00278061 : 0) + 
                     (s = 49 ? 0.00287752 : 0) + 
                     (s = 66 ? 0.00318053 : 0) + 
                     (s = 67 ? 0.0031114 : 0) + 
                     (s = 65 ? 0.00284475 : 0) + 
                     (s = 68 ? 0.00281592 : 0) + 
                     (s = 64 ? 0.00250897 : 0) + 
                     (s = 69 ? 0.00252043 : 0) + 
                     (s = 2 ? 0.00341163 : 0) + 
                     (s = 72 ? 0.00362721 : 0) + 
                     (s = 75 ? 0.00382083 : 0) + 
                     (s = 78 ? 0.00400121 : 0) + 
                     (s = 79 ? 0.0038336 : 0) + 
                     (s = 77 ? 0.00367487 : 0) + 
                     (s = 80 ? 0.00354642 : 0) + 
                     (s = 76 ? 0.00334853 : 0) + 
                     (s = 81 ? 0.00325924 : 0) + 
                     (s = 74 ? 0.00350448 : 0) + 
                     (s = 84 ? 0.00370964 : 0) + 
                     (s = 85 ? 0.00357702 : 0) + 
                     (s = 83 ? 0.00339648 : 0) + 
                     (s = 86 ? 0.00330144 : 0) + 
                     (s = 82 ? 0.00308331 : 0) + 
                     (s = 87 ? 0.00302585 : 0) + 
                     (s = 73 ? 0.00318812 : 0) + 
                     (s = 90 ? 0.00343473 : 0) + 
                     (s = 91 ? 0.0033351 : 0) + 
                     (s = 89 ? 0.00311808 : 0) + 
                     (s = 92 ? 0.00305645 : 0) + 
                     (s = 88 ? 0.00280144 : 0) + 
                     (s = 93 ? 0.0027778 : 0) + 
                     (s = 71 ? 0.00331477 : 0) + 
                     (s = 96 ? 0.00354277 : 0) + 
                     (s = 99 ? 0.00374406 : 0) + 
                     (s = 100 ? 0.00360731 : 0) + 
                     (s = 98 ? 0.00343017 : 0) + 
                     (s = 101 ? 0.00333109 : 0) + 
                     (s = 97 ? 0.00311628 : 0) + 
                     (s = 102 ? 0.00305486 : 0) + 
                     (s = 95 ? 0.00322954 : 0) + 
                     (s = 105 ? 0.00346976 : 0) + 
                     (s = 106 ? 0.00336593 : 0) + 
                     (s = 104 ? 0.00315453 : 0) + 
                     (s = 107 ? 0.00308852 : 0) + 
                     (s = 103 ? 0.00283929 : 0) + 
                     (s = 108 ? 0.00281111 : 0) + 
                     (s = 94 ? 0.00291631 : 0) + 
                     (s = 111 ? 0.0032115 : 0) + 
                     (s = 112 ? 0.00313865 : 0) + 
                     (s = 110 ? 0.00287889 : 0) + 
                     (s = 113 ? 0.00284596 : 0) + 
                     (s = 109 ? 0.00254627 : 0) + 
                     (s = 114 ? 0.00255326 : 0) + 
                     (s = 70 ? 0.00300234 : 0) + 
                     (s = 117 ? 0.00328094 : 0) + 
                     (s = 120 ? 0.00351364 : 0) + 
                     (s = 121 ? 0.00340454 : 0) + 
                     (s = 119 ? 0.00319976 : 0) + 
                     (s = 122 ? 0.00312833 : 0) + 
                     (s = 118 ? 0.00288588 : 0) + 
                     (s = 123 ? 0.00285211 : 0) + 
                     (s = 116 ? 0.00295459 : 0) + 
                     (s = 126 ? 0.00324227 : 0) + 
                     (s = 127 ? 0.00316573 : 0) + 
                     (s = 125 ? 0.00291258 : 0) + 
                     (s = 128 ? 0.0028756 : 0) + 
                     (s = 124 ? 0.00258289 : 0) + 
                     (s = 129 ? 0.00258548 : 0) + 
                     (s = 115 ? 0.00262825 : 0) + 
                     (s = 132 ? 0.00298619 : 0) + 
                     (s = 133 ? 0.00294038 : 0) + 
                     (s = 131 ? 0.00262539 : 0) + 
                     (s = 134 ? 0.00262288 : 0) + 
                     (s = 130 ? 0.0022646 : 0) + 
                     (s = 135 ? 0.00230538 : 0) + 
                     (s = 1 ? 0.00309609 : 0) + 
                     (s = 138 ? 0.00335787 : 0) + 
                     (s = 141 ? 0.00358014 : 0) + 
                     (s = 144 ? 0.0037779 : 0) + 
                     (s = 145 ? 0.00363708 : 0) + 
                     (s = 143 ? 0.00346306 : 0) + 
                     (s = 146 ? 0.00336003 : 0) + 
                     (s = 142 ? 0.00314823 : 0) + 
                     (s = 147 ? 0.00308297 : 0) + 
                     (s = 140 ? 0.00326746 : 0) + 
                     (s = 150 ? 0.0035021 : 0) + 
                     (s = 151 ? 0.00339438 : 0) + 
                     (s = 149 ? 0.0031879 : 0) + 
                     (s = 152 ? 0.00311789 : 0) + 
                     (s = 148 ? 0.00287371 : 0) + 
                     (s = 153 ? 0.0028414 : 0) + 
                     (s = 139 ? 0.00295478 : 0) + 
                     (s = 156 ? 0.00324242 : 0) + 
                     (s = 157 ? 0.00316587 : 0) + 
                     (s = 155 ? 0.00291274 : 0) + 
                     (s = 158 ? 0.00287575 : 0) + 
                     (s = 154 ? 0.00258307 : 0) + 
                     (s = 159 ? 0.00258563 : 0) + 
                     (s = 137 ? 0.0030371 : 0) + 
                     (s = 162 ? 0.0033093 : 0) + 
                     (s = 165 ? 0.00353805 : 0) + 
                     (s = 166 ? 0.00342602 : 0) + 
                     (s = 164 ? 0.00322472 : 0) + 
                     (s = 167 ? 0.00315029 : 0) + 
                     (s = 163 ? 0.0029114 : 0) + 
                     (s = 168 ? 0.00287457 : 0) + 
                     (s = 161 ? 0.00298518 : 0) + 
                     (s = 171 ? 0.003267 : 0) + 
                     (s = 172 ? 0.0031875 : 0) + 
                     (s = 170 ? 0.00293949 : 0) + 
                     (s = 173 ? 0.00289929 : 0) + 
                     (s = 169 ? 0.00261198 : 0) + 
                     (s = 174 ? 0.00261108 : 0) + 
                     (s = 160 ? 0.00266106 : 0) + 
                     (s = 177 ? 0.00301134 : 0) + 
                     (s = 178 ? 0.00296251 : 0) + 
                     (s = 176 ? 0.00265426 : 0) + 
                     (s = 179 ? 0.00264829 : 0) + 
                     (s = 175 ? 0.00229719 : 0) + 
                     (s = 180 ? 0.00233406 : 0) + 
                     (s = 136 ? 0.00271632 : 0) + 
                     (s = 183 ? 0.00305399 : 0) + 
                     (s = 186 ? 0.00332315 : 0) + 
                     (s = 187 ? 0.00323691 : 0) + 
                     (s = 185 ? 0.00300004 : 0) + 
                     (s = 188 ? 0.00295257 : 0) + 
                     (s = 184 ? 0.00267693 : 0) + 
                     (s = 189 ? 0.00266824 : 0) + 
                     (s = 182 ? 0.0027029 : 0) + 
                     (s = 192 ? 0.00304359 : 0) + 
                     (s = 193 ? 0.0029909 : 0) + 
                     (s = 191 ? 0.00269109 : 0) + 
                     (s = 194 ? 0.00268069 : 0) + 
                     (s = 190 ? 0.00233858 : 0) + 
                     (s = 195 ? 0.00237048 : 0) + 
                     (s = 181 ? 0.00235181 : 0) + 
                     (s = 198 ? 0.00277862 : 0) + 
                     (s = 199 ? 0.00275772 : 0) + 
                     (s = 197 ? 0.00238213 : 0) + 
                     (s = 200 ? 0.00240881 : 0) + 
                     (s = 196 ? 0.00198564 : 0) + 
                     (s = 201 ? 0.0020599 : 0);


module clk
	time : [0..HORIZON + 1] init 0;
	readyToTick : bool init true;
	[tick] readyToTick & time < HORIZON + 1 -> 1 : (time' = time + 1) & (readyToTick'=false);
	[tack] !readyToTick -> 1 : (readyToTick'=true);
endmodule

label "final" = time = HORIZON + 1;
formula sys_go = readyToTick;

module controller
	active_servers_A : [0..MAX_SERVERS_A] init ini_servers_A;
	active_servers_B : [0..MAX_SERVERS_B] init ini_servers_B;
	active_servers_C : [0..MAX_SERVERS_C] init ini_servers_C;

	dimmer : [1..DIMMER_LEVELS] init ini_dimmer;

	traffic_A : [0..4] init ini_traffic_A;
	traffic_B : [0..4] init ini_traffic_B;
	traffic_C : [0..4] init ini_traffic_C;

	[addServerA_complete] active_servers_A < MAX_SERVERS_A -> 1 : (active_servers_A' = active_servers_A + 1);
	[addServerB_complete] active_servers_B < MAX_SERVERS_B -> 1 : (active_servers_B' = active_servers_B + 1);
	[addServerC_complete] active_servers_C < MAX_SERVERS_C -> 1 : (active_servers_C' = active_servers_C + 1);

	[removeServerA_start] active_servers_A > 0 -> 1 : (active_servers_A' = active_servers_A - 1);
	[removeServerB_start] active_servers_B > 0 -> 1 : (active_servers_B' = active_servers_B - 1);
	[removeServerC_start] active_servers_C > 0 -> 1 : (active_servers_C' = active_servers_C - 1);

	[increaseDimmer_start] dimmer < DIMMER_LEVELS -> 1 : (dimmer' = dimmer + 1);
	[decreaseDimmer_start] dimmer > 1 -> 1 : (dimmer' = dimmer - 1);

	//A-B-C
	//Possible values 0-25-50-75-100

	// 100-0-0
	[divert_100_0_0] active_servers_A > 0
		-> 1 : (traffic_A' = 4) & (traffic_B' = 0) & (traffic_C' = 0);
	// 75-25-0
	[divert_75_25_0] active_servers_A > 0 & active_servers_B > 0
		-> 1 : (traffic_A' = 3) & (traffic_B' = 1) & (traffic_C' = 0);
	// 75-0-25
	[divert_75_0_25] active_servers_A > 0 & active_servers_C > 0
		-> 1 : (traffic_A' = 3) & (traffic_B' = 0) & (traffic_C' = 1);
	// 50-50-0
	[divert_50_50_0] active_servers_A > 0 & active_servers_B > 0
		-> 1 : (traffic_A' = 2) & (traffic_B' = 2) & (traffic_C' = 0);
	// 50-0-50
	[divert_50_0_50] active_servers_A > 0 & active_servers_C > 0
		-> 1 : (traffic_A' = 2) & (traffic_B' = 0) & (traffic_C' = 2);
	// 50-25-25
	[divert_50_25_25] active_servers_A > 0 & active_servers_B > 0 & active_servers_C > 0
		-> 1 : (traffic_A' = 2) & (traffic_B' = 1) & (traffic_C' = 1);
	// 25-75-0
	[divert_25_75_0] active_servers_A > 0 & active_servers_B > 0
		-> 1 : (traffic_A' = 1) & (traffic_B' = 3) & (traffic_C' = 0);
	// 25-0-75
	[divert_25_0_75] active_servers_A > 0 & active_servers_C > 0
		-> 1 : (traffic_A' = 1) & (traffic_B' = 0) & (traffic_C' = 3);
	// 25-50-25
	[divert_25_50_25] active_servers_A > 0 & active_servers_B > 0 & active_servers_C > 0
		-> 1 : (traffic_A' = 1) & (traffic_B' = 2) & (traffic_C' = 1);
	// 25-25-50
	[divert_25_25_50] active_servers_A > 0 & active_servers_B > 0 & active_servers_C > 0
		-> 1 : (traffic_A' = 1) & (traffic_B' = 1) & (traffic_C' = 2);
	// 0-100-0
	[divert_0_100_0] active_servers_B > 0
		-> 1 : (traffic_A' = 0) & (traffic_B' = 4) & (traffic_C' = 0);
	// 0-0-100
	[divert_0_0_100] active_servers_C > 0
		-> 1 : (traffic_A' = 0) & (traffic_B' = 0) & (traffic_C' = 4);
	// 0-75-25
	[divert_0_75_25] active_servers_B > 0 & active_servers_C > 0
		-> 1 : (traffic_A' = 0) & (traffic_B' = 3) & (traffic_C' = 1);
	// 0-25-75
	[divert_0_25_75] active_servers_B > 0 & active_servers_C > 0
		-> 1 : (traffic_A' = 0) & (traffic_B' = 1) & (traffic_C' = 3);
	// 0-50-50
	[divert_0_50_50] active_servers_B > 0 & active_servers_C > 0
		-> 1 : (traffic_A' = 0) & (traffic_B' = 2) & (traffic_C' = 2);
endmodule


formula addServerA_applicable = active_servers_A < MAX_SERVERS_A & !removeServer_used
				& addServerB_state = 0 & addServerC_state = 0;
formula addServerB_applicable = active_servers_B < MAX_SERVERS_B & !removeServer_used
				& addServerA_state = 0 & addServerC_state = 0;
formula addServerC_applicable = active_servers_C < MAX_SERVERS_C & !removeServer_used
				& addServerA_state = 0 & addServerB_state = 0;

// Two variables not required i.e. active_servers_A , addServerA_state
formula removeServerA_applicable = active_servers_A > 0 & addServerA_state = 0 & active_servers > 1
					 & addServerB_state = 0 & addServerC_state = 0;
formula removeServerB_applicable = active_servers_B > 0 & addServerB_state = 0 & active_servers > 1
					& addServerA_state = 0 & addServerC_state = 0;
formula removeServerC_applicable = active_servers_C > 0 & addServerC_state = 0 & active_servers > 1
					& addServerA_state = 0 & addServerB_state = 0;

formula increaseDimmer_compatible = !decreaseDimmer_used;
formula decreaseDimmer_compatible = !increaseDimmer_used;
formula increase_dimmer_applicable = dimmer < DIMMER_LEVELS & increaseDimmer_compatible;
formula decrease_dimmer_applicable = dimmer > 1 & decreaseDimmer_compatible;

const int addServer_LATENCY_PERIODS = ceil(addServer_LATENCY / PERIOD);

// This remove server constraints that only one server could be removed in one monitoring cycle.
module removeServer
	removeServer_go : bool init true;
	removeServer_used : bool init false;

	[removeServerA_start] sys_go & removeServer_go
		& removeServerA_applicable // applicability conditions
		-> (removeServer_go' = false) & (removeServer_used' = true);

	[removeServerB_start] sys_go & removeServer_go
		& removeServerB_applicable // applicability conditions
		-> (removeServer_go' = false) & (removeServer_used' = true);

	[removeServerC_start] sys_go & removeServer_go
		& removeServerC_applicable // applicability conditions
		-> (removeServer_go' = false) & (removeServer_used' = true);

	// tactic applicable but not used
	[pass_remove_server] sys_go & removeServer_go // can go
		-> (removeServer_go' = false);

	[tick] !removeServer_go -> 1 : (removeServer_go' = true) & (removeServer_used' = false);
endmodule

module addServer
	addServerA_state : [0..addServer_LATENCY_PERIODS] init ini_addServerA_state;
	addServerB_state : [0..addServer_LATENCY_PERIODS] init ini_addServerB_state;
	addServerC_state : [0..addServer_LATENCY_PERIODS] init ini_addServerC_state;

	addServer_go : bool init true;

	// tactic applicable, start it
	[addServerA_start] sys_go & addServer_go // can go
		& addServerA_state = 0 // tactic has not been started
		& addServerA_applicable
		-> (addServerA_state' = 1) & (addServer_go' = false);

	// tactic applicable, start it
	[addServerB_start] sys_go & addServer_go // can go
		& addServerB_state = 0 // tactic has not been started
		& addServerB_applicable
		-> (addServerB_state' = 1) & (addServer_go' = false);

	// tactic applicable, start it
	[addServerC_start] sys_go & addServer_go // can go
		& addServerC_state = 0 // tactic has not been started
		& addServerC_applicable
		-> (addServerC_state' = 1) & (addServer_go' = false);

	// tactic applicable, but don't use it
	[pass_add] sys_go & addServer_go // can go
		& addServerA_state = 0 // tactic has not been started
		& addServerB_state = 0 & addServerC_state = 0
		//& addServerA_applicable
		-> (addServer_go' = false);

	// progress of the tactic
	[progressA] sys_go & addServer_go
		& addServerA_state > 0 & addServerA_state < addServer_LATENCY_PERIODS
		-> 1 : (addServerA_state' = addServerA_state + 1) & (addServer_go' = false);

	[progressB] sys_go & addServer_go
		& addServerB_state > 0 & addServerB_state < addServer_LATENCY_PERIODS
		-> 1 : (addServerB_state' = addServerB_state + 1) & (addServer_go' = false);

	[progressC] sys_go & addServer_go
		& addServerC_state > 0 & addServerC_state < addServer_LATENCY_PERIODS
		-> 1 : (addServerC_state' = addServerC_state + 1) & (addServer_go' = false);

	// completion of the tactic
	[addServerA_complete] sys_go & addServer_go
		& addServerA_state = addServer_LATENCY_PERIODS // completed
		-> 1 : (addServerA_state' = 0) & (addServer_go' = true); // so that it can start again at this time if needed

	[addServerB_complete] sys_go & addServer_go
		& addServerB_state = addServer_LATENCY_PERIODS // completed
		-> 1 : (addServerB_state' = 0) & (addServer_go' = true); // so that it can start again at this time if needed

	[addServerC_complete] sys_go & addServer_go
		& addServerC_state = addServer_LATENCY_PERIODS // completed
		-> 1 : (addServerC_state' = 0) & (addServer_go' = true); // so that it can start again at this time if needed
	
	[tick] !addServer_go -> 1 : (addServer_go' = true);
endmodule

// Make sure that divert traffic is executed at the end i.e.after adding or removing the servers.
formula divert_traffic_applicable = divert_go & !addServer_go & !removeServer_go & !increaseDimmer_go & !decreaseDimmer_go;

module divert_traffic
	divert_go : bool init true;

	//A-B-C
	//Possible values 0-25-50-75-100

	// 100-0-0
	[divert_100_0_0] sys_go & divert_traffic_applicable 
		-> 1 : (divert_go'=false);
	// 75-25-0
	[divert_75_25_0] sys_go & divert_traffic_applicable
		-> 1 : (divert_go'=false);
	// 75-0-25
	[divert_75_0_25] sys_go & divert_traffic_applicable 
		-> 1 : (divert_go'=false);
	// 50-50-0
	[divert_50_50_0] sys_go & divert_traffic_applicable 
		-> 1 : (divert_go'=false);
	// 50-0-50
	[divert_50_0_50] sys_go & divert_traffic_applicable 
		-> 1 : (divert_go'=false);
	// 50-25-25
	[divert_50_25_25] sys_go & divert_traffic_applicable
		-> 1 : (divert_go'=false);
	// 25-75-0
	[divert_25_75_0] sys_go & divert_traffic_applicable
		-> 1 : (divert_go'=false);
	// 25-0-75
	[divert_25_0_75] sys_go & divert_traffic_applicable
		-> 1 : (divert_go'=false);
	// 25-50-25
	[divert_25_50_25] sys_go & divert_traffic_applicable
		-> 1 : (divert_go'=false);
	// 25-25-50
	[divert_25_25_50] sys_go & divert_traffic_applicable
		-> 1 : (divert_go'=false);
	// 0-100-0
	[divert_0_100_0] sys_go & divert_traffic_applicable
		-> 1 : (divert_go'=false);
	// 0-0-100
	[divert_0_0_100] sys_go & divert_traffic_applicable
		-> 1 : (divert_go'=false);
	// 0-75-25
	[divert_0_75_25] sys_go & divert_traffic_applicable
		-> 1 : (divert_go'=false);
	// 0-25-75
	[divert_0_25_75] sys_go & divert_traffic_applicable
		-> 1 : (divert_go'=false);
	// 0-50-50
	[divert_0_50_50] sys_go & divert_traffic_applicable
		-> 1 : (divert_go'=false);

	[tick] !divert_go -> 1 : (divert_go' = true);
endmodule

module increaseDimmer
	increaseDimmer_go : bool init true;
	increaseDimmer_used : bool init false;

	[increaseDimmer_start] sys_go & increaseDimmer_go
		& increase_dimmer_applicable // applicability conditions
		-> (increaseDimmer_go' = false) & (increaseDimmer_used' = true);

	// tactic applicable but not used
	[pass_inc_dimmer] sys_go & increaseDimmer_go // can go
		-> (increaseDimmer_go' = false);

	[tick] !increaseDimmer_go -> 1 : (increaseDimmer_go' = true) & (increaseDimmer_used' = false);
endmodule

// tactic
module decreaseDimmer
	decreaseDimmer_go : bool init true;
	decreaseDimmer_used : bool init false;

	[decreaseDimmer_start] sys_go & decreaseDimmer_go
		& decrease_dimmer_applicable // applicability conditions
		-> (decreaseDimmer_go' = false) & (decreaseDimmer_used' = true);

	// tactic applicable but not used
	[pass_dec_dimmer] sys_go & decreaseDimmer_go // can go
		-> (decreaseDimmer_go' = false);

	[tick] !decreaseDimmer_go -> 1 : (decreaseDimmer_go' = true) & (decreaseDimmer_used' = false);
endmodule

//*****************************************************************
// Queuing network with each server having queueing model of M/M/1 
//*****************************************************************
formula dimmerFactor = (dimmer - 1) / (DIMMER_LEVELS - 1);
formula interarrivalMean = stateValue * interArrivalScaleFactorForDecision;

formula Pa = (traffic_A * 25)/100;
formula Pb = (traffic_B * 25)/100;
formula Pc = (traffic_C * 25)/100;

formula loaded_servers = (Pa != 0 ? 1 : 0) + (Pb != 0 ? 1 : 0) + (Pc != 0 ? 1 : 0);

formula service_rate_A = dimmerFactor * (MAX_ARRIVALA_CAPACITY_LOW) 
			+ (1 - dimmerFactor) * (MAX_ARRIVALA_CAPACITY);
formula service_rate_B = dimmerFactor * (MAX_ARRIVALB_CAPACITY_LOW) 
			+ (1 - dimmerFactor) * (MAX_ARRIVALB_CAPACITY);
formula service_rate_C = dimmerFactor * (MAX_ARRIVALC_CAPACITY_LOW) 
			+ (1 - dimmerFactor) * (MAX_ARRIVALC_CAPACITY);

formula rhoA = Pa/(service_rate_A*interarrivalMean);
formula rhoB = Pb/(service_rate_B*interarrivalMean);
formula rhoC = Pc/(service_rate_C*interarrivalMean);

formula overloaded = (rhoA >= 1 | rhoB >= 1 | rhoC >= 1);
//const double DBL_MAX = 1.5e+300;

formula rt_A = 1/(service_rate_A - (throughput*Pa));
formula rt_B = 1/(service_rate_B - (throughput*Pb));
formula rt_C = 1/(service_rate_C - (throughput*Pc));

// Response time to clients utility function
const double RT_THRESHOLD = 1.0;

//formula expected_wait_time = interarrivalMean * (rhoA/(1-rhoA) + rhoB/(1-rhoB) + rhoC/(1-rhoC));
formula expected_wait_time = (Pa*rt_A + Pb*rt_B + Pc*rt_C);
formula rt = (interarrivalMean = 0 ? 0 : (overloaded ? RT_THRESHOLD + 2 : expected_wait_time));



//const double NORMAL_A_REVENUE = (SERVERA_COST_SEC / MAX_ARRIVALA_CAPACITY) * 10;
//const double DIMMER_A_REVENUE = (SERVERA_COST_SEC / MAX_ARRIVALA_CAPACITY_LOW) * 3 / 2;
//const double NORMAL_B_REVENUE = (SERVERB_COST_SEC / MAX_ARRIVALB_CAPACITY) * 10;
//const double DIMMER_B_REVENUE = (SERVERB_COST_SEC / MAX_ARRIVALB_CAPACITY_LOW) * 3 / 2;
//const double NORMAL_C_REVENUE = (SERVERC_COST_SEC / MAX_ARRIVALC_CAPACITY) * 10;
//const double DIMMER_C_REVENUE = (SERVERC_COST_SEC / MAX_ARRIVALC_CAPACITY_LOW) * 3 / 2;
const double NORMAL_A_REVENUE = (SERVERA_COST_SEC / MAX_ARRIVALA_CAPACITY) * 10;
const double DIMMER_A_REVENUE = (SERVERA_COST_SEC / MAX_ARRIVALA_CAPACITY_LOW) * 3 / 2;
const double NORMAL_B_REVENUE = (SERVERB_COST_SEC / MAX_ARRIVALB_CAPACITY) * 10;
const double DIMMER_B_REVENUE = (SERVERB_COST_SEC / MAX_ARRIVALB_CAPACITY_LOW) * 3 / 2;
const double NORMAL_C_REVENUE = (SERVERC_COST_SEC / MAX_ARRIVALC_CAPACITY) * 10;
const double DIMMER_C_REVENUE = (SERVERC_COST_SEC / MAX_ARRIVALC_CAPACITY_LOW) * 3 / 2;

const double DIMMER_REVENUE = DIMMER_A_REVENUE + DIMMER_B_REVENUE + DIMMER_C_REVENUE;
const double NORMAL_REVENUE = NORMAL_A_REVENUE + NORMAL_B_REVENUE + NORMAL_C_REVENUE;

formula serverA_cost = ((addServerA_state > 0 ? 1 : 0) + active_servers_A) * SERVERA_COST_SEC;
formula serverB_cost = ((addServerB_state > 0 ? 1 : 0) + active_servers_B) * SERVERB_COST_SEC;
formula serverC_cost = ((addServerC_state > 0 ? 1 : 0) + active_servers_C) * SERVERC_COST_SEC;
formula cost = serverA_cost + serverB_cost + serverC_cost;

formula throughput = 1/interarrivalMean;

formula basicUtilityA = throughput * Pa * (dimmerFactor * DIMMER_A_REVENUE + (1 - dimmerFactor) * NORMAL_A_REVENUE);
formula basicUtilityB = throughput * Pb * (dimmerFactor * DIMMER_B_REVENUE + (1 - dimmerFactor) * NORMAL_B_REVENUE);
formula basicUtilityC = throughput * Pc * (dimmerFactor * DIMMER_C_REVENUE + (1 - dimmerFactor) * NORMAL_C_REVENUE);

formula basicUtility = basicUtilityA + basicUtilityB + basicUtilityC;
//formula basicUtility = throughput * (dimmerFactor * DIMMER_REVENUE + (1-dimmerFactor) * NORMAL_REVENUE);
formula active_servers = active_servers_A + active_servers_B + active_servers_C;
formula poweredServers = (addServerA_state > 0 ? 1 : 0) + (addServerB_state > 0 ? 1 : 0) + (addServerC_state > 0 ? 1 : 0 )
	 + active_servers;
formula MAX_SERVERS = MAX_SERVERS_A + MAX_SERVERS_B + MAX_SERVERS_C;

formula MAX_SERVER_COST = MAX_SERVERS_A * SERVERA_COST_SEC
			+ MAX_SERVERS_B * SERVERB_COST_SEC
			+ MAX_SERVERS_C * SERVERC_COST_SEC;

formula netPenalty = stateValue > 0 ? penalty / stateValue : 0;

formula uTotal = (overloaded & (poweredServers < MAX_SERVERS | dimmer < DIMMER_LEVELS | active_servers != loaded_servers))
					? -(1000) // avoid unstable solutions
				: (((rt > RT_THRESHOLD | rt <= 0) ? netPenalty : basicUtility) - cost);


rewards "util"
	[tack] true : 100000000.0 + (PERIOD)*(uTotal);
endrewards


